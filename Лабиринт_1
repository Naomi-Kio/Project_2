import pygame
import os
import sys

WINDOW_SIZE = WINDOW_WIDTH, WINDOW_HEIGHT = 832, 540
FPS = 8
MAPS_DIR = 'maps'
TILE_SIZE = 32
ENEMY_EVENT_TYPE = 30


class Labyrinth:
    def __init__(self, file_name, free_tiles, finish_tile, hero):
        self.map = []
        self.count_num = 0
        self.hero = hero
        self.image = load_image("star.png", -1)
        self.rect_1 = self.image.get_rect(center=(592, 48))
        self.rect_2 = self.image.get_rect(center=(592, 336))
        self.rect_3 = self.image.get_rect(center=(112, 304))
        with open(f"{MAPS_DIR}/{file_name}") as input_file:
            for line in input_file:
                self.map.append(list(map(int, line.split())))
            self.height = len(self.map)
            self.width = len(self.map[0])
            self.tile_size = TILE_SIZE
            self.free_tiles = free_tiles
            self.finish_tile = finish_tile

    def render(self, screen):
        colors = {0: (0, 0, 0), 1: (0, 0, 200), 2: (230, 230, 0)}
        for y in range(self.height):
            for x in range(self.width):
                rect = pygame.Rect(x * self.tile_size, y * self.tile_size,
                                   self.tile_size, self.tile_size)
                screen.fill(colors[self.get_tile_id((x, y))], rect)
                if self.count_num != 3:
                    rect = pygame.Rect(22 * self.tile_size,
                                       13 * self.tile_size,
                                       self.tile_size, self.tile_size)
                    screen.fill((0, 0, 200), rect)
                if self.count_num == 0:
                    screen.blit(self.image, self.rect_2)
                    if self.get_position() == (18, 10):
                        self.count_num = 1
                elif self.count_num == 1:
                    screen.blit(self.image, self.rect_3)
                    if self.get_position() == (3, 9):
                        self.count_num = 2
                elif self.count_num == 2:
                    screen.blit(self.image, self.rect_1)
                    if self.get_position() == (18, 1):
                        self.count_num = 3

    def get_position(self):
        position = self.hero.get_position()
        return position

    def get_tile_id(self, position):
        return self.map[position[1]][position[0]]

    def is_free(self, position):
        return self.get_tile_id(position) in self.free_tiles

    def find_path_step(self, start, target):
        INF = 1000
        x, y = start
        distance = [[INF] * self.width for _ in range(self.height)]
        distance[y][x] = 0
        prev = [[None] * self.width for _ in range(self.height)]
        queue = [(x, y)]
        while queue:
            x, y = queue.pop(0)
            for dx, dy in (1, 0), (0, 1), (-1, 0), (0, -1):
                next_x, next_y = x + dx, y + dy
                if 0 <= next_x < self.width and 0 < next_y < self.height and \
                        self.is_free((next_x, next_y)) and distance[next_y][next_x] == INF:
                    distance[next_y][next_x] = distance[y][x] + 1
                    prev[next_y][next_x] = (x, y)
                    queue.append((next_x, next_y))
        x, y = target
        if distance[y][x] == INF or start == target:
            return start
        while prev[y][x] != start:
            x, y = prev[y][x]
        return x, y


class Hero:
    def __init__(self, position):
        self.x, self.y = position

    def get_position(self):
        return self.x, self.y

    def set_position(self, position):
        self.x, self.y = position

    def render(self, screen):
        center = self.x * TILE_SIZE + TILE_SIZE // 2,\
                 self.y * TILE_SIZE + TILE_SIZE // 2
        pygame.draw.circle(screen, (255, 255, 255), center, TILE_SIZE // 2)


class Enemy:
    def __init__(self, position):
        self.x, self.y = position
        self.delay = 1000
        pygame.time.set_timer(ENEMY_EVENT_TYPE, self.delay)

    def get_position(self):
        return self.x, self.y

    def set_position(self, position):
        self.x, self.y = position

    def render(self, screen):
        center = self.x * TILE_SIZE + TILE_SIZE // 2,\
                 self.y * TILE_SIZE + TILE_SIZE // 2
        pygame.draw.circle(screen, (255, 0, 0), center, TILE_SIZE // 2)


class Game:
    def __init__(self, labyrinth, hero, enemy):
        self.labyrinth = labyrinth
        self.hero = hero
        self.enemy = enemy

    def render(self, screen):
        self.labyrinth.render(screen)
        self.hero.render(screen)
        self.enemy.render(screen)

    def update_hero(self):
        next_x, next_y = self.hero.get_position()
        if pygame.key.get_pressed()[pygame.K_LEFT]:
            next_x -= 1
        if pygame.key.get_pressed()[pygame.K_RIGHT]:
            next_x += 1
        if pygame.key.get_pressed()[pygame.K_UP]:
            next_y -= 1
        if pygame.key.get_pressed()[pygame.K_DOWN]:
            next_y += 1
        if self.labyrinth.is_free((next_x, next_y)):
            self.hero.set_position((next_x, next_y))

    def move_enemy(self):
        next_position = self.labyrinth.find_path_step(self.enemy.get_position(),
                                                      self.hero.get_position())
        self.enemy.set_position(next_position)

    def check_win(self):
        return self.labyrinth.get_tile_id(self.hero.get_position()) == self.labyrinth.finish_tile

    def check_lose(self):
        return self.hero.get_position() == self.enemy.get_position()


def show_message(screen, message):
    font = pygame.font.Font(None, 50)
    text = font.render(message, 1, (10, 80, 0))
    text_x = WINDOW_WIDTH // 2 - text.get_width() // 2
    text_y = WINDOW_HEIGHT // 2 - text.get_height() // 2
    text_w = text.get_width()
    text_h = text.get_height()
    pygame.draw.rect(screen, (225, 150, 0), (text_x - 10, text_y - 10,
                                             text_w + 20, text_h + 20))
    screen.blit(text, (text_x, text_y))


def load_image(name, color_key=None):
    fullname = os.path.join('DATA', name)
    try:
        image = pygame.image.load(fullname).convert()
    except pygame.error as message:
        print('Cannot load image:', name)
        raise SystemExit(message)

    if color_key is not None:
        if color_key == -1:
            color_key = image.get_at((0, 0))
        image.set_colorkey(color_key)
    else:
        image = image.convert_alpha()
    return image


def start_screen(screen, clock):
    intro_text = ["              Лабиринт",
                  " ",
                  " *Соберите три звезды,",
                  "  чтобы найти жёлтый выход",
                  " *Не дайте красному кругу",
                  "  вас догнать"]
    result_text = ["Лучший результат:",
                   "   "]
    fon = pygame.transform.scale(load_image('labyrinth.png'), (850, 550))
    screen.blit(fon, (0, 0))
    font = pygame.font.Font(None, 33)
    text_coord_1 = 200
    text_coord_2 = 230
    for line in intro_text:
        string_rendered = font.render(line, 1, pygame.Color('white'))
        intro_rect = string_rendered.get_rect()
        text_coord_1 += 10
        intro_rect.top = text_coord_1
        intro_rect.x = 10
        text_coord_1 += intro_rect.height
        screen.blit(string_rendered, intro_rect)
    for line in result_text:
        string_rendered = font.render(line, 1, pygame.Color('white'))
        intro_rect = string_rendered.get_rect()
        text_coord_2 += 10
        intro_rect.top = text_coord_2
        intro_rect.x = 570
        text_coord_2 += intro_rect.height
        screen.blit(string_rendered, intro_rect)
    while True:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                terminate()
            elif event.type == pygame.KEYDOWN or event.type == pygame.MOUSEBUTTONDOWN:
                return
        pygame.display.flip()
        clock.tick(FPS)


def terminate():
    pygame.quit()
    sys.exit()


def main():
    pygame.init()
    screen = pygame.display.set_mode(WINDOW_SIZE)
    pygame.display.set_caption('Лабиринт')
    hero = Hero((1, 1))
    enemy = Enemy((11, 8))
    labyrinth = Labyrinth('map.txt', [0, 2], 2, hero)
    game = Game(labyrinth, hero, enemy)
    clock = pygame.time.Clock()
    start_screen(screen, clock)
    running = True
    game_over = False
    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
            if event.type == ENEMY_EVENT_TYPE and not game_over:
                game.move_enemy()
        if not game_over:
            game.update_hero()
        screen.fill((0, 0, 0))
        game.render(screen)
        if game.check_win():
            game_over = True
            show_message(screen, 'You won!')
        if game.check_lose():
            game_over = True
            show_message(screen, 'You lost!')
        pygame.display.flip()
        clock.tick(FPS)
    pygame.quit()


if __name__ == '__main__':
    main()
